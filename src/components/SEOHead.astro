---
import { siteConfig } from '../config/site';

interface Props {
  title?: string;
  description?: string;
  canonical?: string;
  noindex?: boolean;
  nofollow?: boolean;
  image?: string;
  type?: 'website' | 'article' | 'profile';
  publishDate?: Date;
  author?: string;
  tags?: string[];
  schema?: 'Person' | 'WebSite' | 'Article' | 'BlogPosting';
}

const {
  title = siteConfig.title,
  description = siteConfig.description,
  canonical = Astro.url.href,
  noindex = false,
  nofollow = false,
  image = `${siteConfig.url}/og-image.png`,
  type = 'website',
  publishDate,
  author = siteConfig.author.name,
  tags = [],
  schema = 'WebSite',
} = Astro.props;

// Generate structured data based on schema type
const generateStructuredData = () => {
  const baseSchema = {
    '@context': 'https://schema.org',
  };

  switch (schema) {
    case 'Person':
      return {
        ...baseSchema,
        '@type': 'Person',
        name: siteConfig.author.name,
        url: siteConfig.url,
        jobTitle: siteConfig.author.title,
        email: siteConfig.author.email,
        sameAs: [
          siteConfig.author.social.github,
          siteConfig.author.social.linkedin,
          siteConfig.author.social.twitter,
        ].filter(Boolean),
        knowsAbout: siteConfig.keywords,
        description: description,
      };

    case 'WebSite':
      return {
        ...baseSchema,
        '@type': 'WebSite',
        name: siteConfig.title,
        url: siteConfig.url,
        description: description,
        author: {
          '@type': 'Person',
          name: siteConfig.author.name,
          url: siteConfig.url,
        },
        potentialAction: {
          '@type': 'SearchAction',
          target: `${siteConfig.url}/search?q={search_term_string}`,
          'query-input': 'required name=search_term_string',
        },
      };

    case 'Article':
    case 'BlogPosting':
      return {
        ...baseSchema,
        '@type': schema,
        headline: title,
        description: description,
        image: image,
        url: canonical,
        datePublished: publishDate?.toISOString(),
        dateModified: publishDate?.toISOString(),
        author: {
          '@type': 'Person',
          name: author,
        },
        publisher: {
          '@type': 'Person',
          name: siteConfig.author.name,
          url: siteConfig.url,
        },
        keywords: tags.join(', '),
      };

    default:
      return baseSchema;
  }
};

const structuredData = generateStructuredData();

// Generate robots content
const robotsContent = [
  noindex ? 'noindex' : 'index',
  nofollow ? 'nofollow' : 'follow',
  'max-snippet:-1',
  'max-image-preview:large',
  'max-video-preview:-1',
].join(', ');

// Generate keywords
const metaKeywords = [...siteConfig.keywords, ...tags].join(', ');
---

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content={metaKeywords} />
<meta name="author" content={author} />
<meta name="robots" content={robotsContent} />

<!-- Canonical URL -->
<link rel="canonical" href={canonical} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonical} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:site_name" content={siteConfig.title} />
<meta property="og:locale" content="en_US" />

{
  type === 'article' && publishDate && (
    <>
      <meta
        property="article:published_time"
        content={publishDate.toISOString()}
      />
      <meta property="article:author" content={author} />
      {tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))}
    </>
  )
}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonical} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image} />
{
  siteConfig.author.social.twitter && (
    <meta
      property="twitter:creator"
      content={`@${siteConfig.author.social.twitter.split('/').pop()}`}
    />
  )
}

<!-- Additional SEO Tags -->
<meta
  name="theme-color"
  content="#0a0a0a"
  media="(prefers-color-scheme: dark)"
/>
<meta
  name="theme-color"
  content="#ffffff"
  media="(prefers-color-scheme: light)"
/>
<meta name="color-scheme" content="dark light" />

<!-- Favicon and Icons -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/manifest.json" />

<!-- DNS Prefetch for Performance -->
<link rel="dns-prefetch" href="//fonts.googleapis.com" />
<link rel="dns-prefetch" href="//fonts.gstatic.com" />
<link rel="dns-prefetch" href="//api.github.com" />

<!-- Preconnect to Critical Resources -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<!-- Additional structured data for portfolio -->
{
  schema === 'Person' && (
    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'ProfilePage',
        mainEntity: {
          '@type': 'Person',
          name: siteConfig.author.name,
          jobTitle: siteConfig.author.title,
          url: siteConfig.url,
          sameAs: [
            siteConfig.author.social.github,
            siteConfig.author.social.linkedin,
            siteConfig.author.social.twitter,
          ].filter(Boolean),
        },
      })}
    />
  )
}

<!-- Web App Manifest -->
<link rel="manifest" href="/manifest.json" />

<!-- RSS Feed -->
{
  siteConfig.rss && (
    <link
      rel="alternate"
      type="application/rss+xml"
      title={siteConfig.title}
      href="/rss.xml"
    />
  )
}

<!-- Sitemap -->
<link rel="sitemap" type="application/xml" href="/sitemap.xml" />

<!-- Search Engine Verification (add your verification codes) -->
<!-- <meta name="google-site-verification" content="your-google-verification-code" /> -->
<!-- <meta name="bing-site-verification" content="your-bing-verification-code" /> -->

<style>
  /* Critical CSS for above-the-fold content */
  :root {
    --font-family: 'JetBrains Mono', 'Courier New', monospace;
    --color-primary: #00ff41;
    --color-background: #0a0a0a;
    --color-text: #ffffff;
  }

  body {
    font-family: var(--font-family);
    background-color: var(--color-background);
    color: var(--color-text);
    margin: 0;
    padding: 0;
  }

  /* Prevent flash of unstyled content */
  .container {
    visibility: hidden;
  }

  .container.loaded {
    visibility: visible;
  }
</style>

<script>
  // Prevent flash of unstyled content
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.container');
    if (container) {
      container.classList.add('loaded');
    }
  });
</script>
