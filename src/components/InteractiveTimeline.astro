---
interface TimelineEvent {
  year: string;
  title: string;
  type: 'education' | 'work' | 'project' | 'achievement';
  description: string;
  details?: string[];
  icon?: string;
  nodeType?: string;
}

interface Props {
  events: TimelineEvent[];
}

const { events } = Astro.props as Props;

// Sort events by year
const sortedEvents = events.sort((a, b) => parseInt(a.year) - parseInt(b.year));
---

<div class="system-timeline">
    <!-- Print View: Professional Timeline -->
    <div class="timeline-print">
        <div class="timeline-grid-print">
            {sortedEvents.map((event, index) => (
                <div class="timeline-entry-print">
                    <div class="entry-year">{event.year}</div>
                    <div class="entry-content">
                        <h4 class="entry-title">{event.title}</h4>
                        <p class="entry-description">{event.description}</p>
                        <span class="entry-type">{event.type.toUpperCase()}</span>
                    </div>
                </div>
            ))}
        </div>
    </div>

    <!-- Digital View: System Architecture Schematic -->
    <div class="timeline-digital">
        <div class="system-header">
            <div class="header-ascii">
                ┌─ SYSTEM_ARCHITECTURE_DIAGRAM ───────────────────────────────────┐<br/>
                │ [CAREER_PIPELINE] Data Flow: {sortedEvents[0].year} → {sortedEvents[sortedEvents.length-1].year}                     │<br/>
                └─────────────────────────────────────────────────────────────────┘
            </div>
        </div>
        
        <div class="system-schematic">
            <!-- Main data bus -->
            <div class="data-bus-container">
                <div class="bus-labels">
                    <div class="bus-label start">[INPUT]</div>
                    <div class="bus-label end">[OUTPUT]</div>
                </div>
                
                <!-- Connection grid -->
                <div class="connection-grid">
                    {sortedEvents.map((_, index) => 
                        index < sortedEvents.length - 1 && (
                            <div 
                                class="connection-segment"
                                style={`left: ${(index / (sortedEvents.length - 1)) * 100}%; width: ${(100 / (sortedEvents.length - 1))}%`}
                            >
                                <div class="data-flow"></div>
                                <div class="connection-ascii">═══════════════════▸</div>
                            </div>
                        )
                    )}
                </div>
                
                <!-- System nodes -->
                {sortedEvents.map((event, index) => (
                    <div 
                        class={`system-node node-${event.type} ${event.nodeType ? 'node-' + event.nodeType : ''}`}
                        data-year={event.year}
                        data-index={index}
                        style={`left: ${(index / (sortedEvents.length - 1)) * 100}%`}
                    >
                        <div class="node-connector">
                            <div class="connector-up">│</div>
                            <div class="node-marker">{event.icon || (event.nodeType === 'init' ? '◆' : event.nodeType === 'junction' ? '╬' : event.nodeType === 'process' ? '▸' : event.nodeType === 'active' ? '●' : '◦')}</div>
                            <div class="connector-down">│</div>
                        </div>
                        
                        <div class="node-info">
                            <div class="node-id">[{String(index + 1).padStart(2, '0')}]</div>
                            <div class="node-year">{event.year}</div>
                        </div>
                        
                        <!-- Terminal-style details popup -->
                        <div class="node-terminal">
                            <div class="terminal-header">
                                <div class="term-line">┌─ NODE_{String(index + 1).padStart(2, '0')}_DETAILS ─┐</div>
                            </div>
                            <div class="terminal-body">
                                <div class="term-line">│ PROC: {event.title.slice(0, 12)}...│</div>
                                <div class="term-line">├─────────────────────┤</div>
                                <div class="term-line">│ TYPE: {event.type.toUpperCase().padEnd(13)}│</div>
                                <div class="term-line">│ YEAR: {event.year.padEnd(13)}│</div>
                                <div class="term-line">│ STAT: {'ACTIVE'.padEnd(13)}│</div>
                                {event.details && (
                                    <>
                                        <div class="term-line">├─ SPECS ─────────────┤</div>
                                        {event.details.slice(0, 3).map(detail => (
                                            <div class="term-line">│ ▸ {detail.slice(0, 15).padEnd(15)}│</div>
                                        ))}
                                    </>
                                )}
                                <div class="term-line">└─────────────────────┘</div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
        
        <!-- Navigation Console -->
        <div class="nav-console">
            <div class="console-frame">
                <div class="console-header">
                    ┌─ NAVIGATION_CONSOLE ─┐
                </div>
                <div class="console-body">
                    │ <button class="nav-cmd nav-prev">[←PREV]</button> <div class="nav-status">[STATUS: <span class="status-indicator">██</span>]</div> <button class="nav-cmd nav-next">[NEXT→]</button> │
                </div>
                <div class="console-footer">
                    └──────────────────────┘
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .system-timeline {
        position: relative;
        font-family: var(--font-body);
    }

    /* Print View - System Log */
    .timeline-print {
        display: none;
    }

    body.print-view .timeline-print {
        display: block;
    }

    body.print-view .timeline-digital {
        display: none;
    }

    .log-header, .log-footer {
        font-family: var(--font-body);
        font-size: 11px;
        color: var(--foreground-print);
        margin: 10px 0;
    }

    .log-line {
        font-family: var(--font-body);
        font-size: 11px;
        color: var(--foreground-print);
        line-height: 1.2;
        margin: 2px 0;
    }

    .system-log-entry {
        margin-bottom: 0;
    }

    /* Digital View - System Schematic */
    .timeline-digital {
        display: block;
        margin: 20px 0;
    }

    .system-header {
        margin-bottom: 30px;
    }

    .header-ascii {
        font-family: var(--font-body);
        font-size: 10px;
        line-height: 1.2;
        color: var(--foreground-digital);
        white-space: pre;
        text-align: center;
        margin-bottom: 20px;
        opacity: 0.8;
    }

    .system-schematic {
        position: relative;
        height: 400px;
        overflow-x: auto;
        overflow-y: hidden;
        padding: 60px 0;
        margin-bottom: 30px;
        scroll-behavior: smooth;
    }

    .data-bus-container {
        position: relative;
        width: max(100%, 1400px);
        height: 280px;
    }

    .bus-labels {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        font-family: var(--font-body);
        font-size: 10px;
        color: var(--muted-digital);
        padding: 0 60px;
    }

    .bus-label {
        background: var(--background-digital);
        padding: 2px 6px;
        border: 1px solid var(--border-digital);
    }

    /* Connection Grid */
    .connection-grid {
        position: absolute;
        top: 140px;
        left: 60px;
        right: 60px;
        height: 20px;
    }

    .connection-segment {
        position: absolute;
        height: 100%;
        display: flex;
        align-items: center;
    }

    .connection-ascii {
        font-family: var(--font-body);
        font-size: 14px;
        color: var(--border-digital);
        width: 100%;
        text-align: center;
        letter-spacing: -2px;
        animation: pulse 3s ease-in-out infinite;
    }

    .data-flow {
        position: absolute;
        top: 50%;
        left: 0;
        width: 10px;
        height: 2px;
        background: var(--foreground-digital);
        opacity: 0;
        animation: dataFlow 2s linear infinite;
        box-shadow: 0 0 10px var(--foreground-digital);
    }

    @keyframes dataFlow {
        0% { left: 0; opacity: 0; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { left: 100%; opacity: 0; }
    }

    @keyframes pulse {
        0%, 100% { opacity: 0.3; }
        50% { opacity: 0.8; }
    }

    /* System Nodes */
    .system-node {
        position: absolute;
        top: 80px;
        transform: translateX(-50%);
        cursor: pointer;
        transition: all 0.4s ease;
    }

    .node-connector {
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 10;
        position: relative;
    }

    .connector-up, .connector-down {
        font-family: var(--font-body);
        font-size: 16px;
        color: var(--border-digital);
        height: 20px;
        line-height: 1;
    }

    .node-marker {
        font-family: var(--font-body);
        font-size: 20px;
        color: var(--foreground-digital);
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(10, 10, 10, 0.9);
        border: 2px solid var(--border-digital);
        margin: 2px 0;
        transition: all 0.3s ease;
    }

    .node-info {
        text-align: center;
        margin-top: 10px;
        font-family: var(--font-body);
        font-size: 10px;
    }

    .node-id {
        color: var(--foreground-digital);
        font-weight: bold;
    }

    .node-year {
        color: var(--muted-digital);
        margin-top: 2px;
    }

    /* Node Type Styling */
    .node-education .node-marker {
        border-color: #64ffda;
        color: #64ffda;
        box-shadow: 0 0 10px rgba(100, 255, 218, 0.3);
    }

    .node-work .node-marker {
        border-color: #00ff41;
        color: #00ff41;
        box-shadow: 0 0 10px rgba(0, 255, 65, 0.3);
    }

    .node-project .node-marker {
        border-color: #ffa726;
        color: #ffa726;
        box-shadow: 0 0 10px rgba(255, 167, 38, 0.3);
    }

    .node-achievement .node-marker {
        border-color: #9c27b0;
        color: #9c27b0;
        box-shadow: 0 0 10px rgba(156, 39, 176, 0.3);
    }

    .node-init .node-marker {
        animation: initPulse 2s ease-in-out infinite;
    }

    .node-active .node-marker {
        animation: activePulse 1.5s ease-in-out infinite;
    }

    @keyframes initPulse {
        0%, 100% { box-shadow: 0 0 10px currentColor; }
        50% { box-shadow: 0 0 20px currentColor, 0 0 30px currentColor; }
    }

    @keyframes activePulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.1); }
    }

    /* Terminal Details Popup */
    .node-terminal {
        position: absolute;
        top: 100px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.95);
        border: 1px solid var(--border-digital);
        font-family: var(--font-body);
        font-size: 9px;
        line-height: 1.1;
        opacity: 0;
        pointer-events: none;
        transition: all 0.4s ease;
        z-index: 20;
        white-space: pre;
        min-width: 200px;
    }

    .terminal-header, .terminal-body {
        color: var(--foreground-digital);
    }

    .term-line {
        margin: 1px 0;
        color: var(--foreground-digital);
    }

    .system-node:hover .node-terminal {
        opacity: 1;
        pointer-events: auto;
        transform: translateX(-50%) translateY(-10px);
    }

    .system-node:hover .node-marker {
        transform: scale(1.2);
        box-shadow: 0 0 20px currentColor, 0 0 30px currentColor;
    }

    .system-node:hover .connector-up,
    .system-node:hover .connector-down {
        color: var(--foreground-digital);
        text-shadow: 0 0 5px currentColor;
    }

    /* Navigation Console */
    .nav-console {
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }

    .console-frame {
        font-family: var(--font-body);
        font-size: 10px;
        color: var(--foreground-digital);
    }

    .console-header, .console-footer {
        text-align: center;
        color: var(--muted-digital);
    }

    .console-body {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 5px 10px;
    }

    .nav-cmd {
        background: transparent;
        border: 1px solid var(--border-digital);
        color: var(--foreground-digital);
        padding: 4px 8px;
        font-family: var(--font-body);
        font-size: 9px;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .nav-cmd:hover {
        background: var(--accent-digital);
        color: var(--background-digital);
        box-shadow: 0 0 10px var(--foreground-digital);
    }

    .nav-status {
        display: flex;
        align-items: center;
        gap: 5px;
        color: var(--muted-digital);
        font-size: 9px;
    }

    .status-indicator {
        color: var(--foreground-digital);
        animation: statusBlink 1s ease-in-out infinite;
    }

    @keyframes statusBlink {
        0%, 50% { opacity: 1; }
        51%, 100% { opacity: 0.3; }
    }

    /* Mobile Responsive */
    @media (max-width: 768px) {
        .system-schematic {
            height: 350px;
            padding: 40px 0;
        }

        .data-bus-container {
            width: max(100%, 1000px);
            height: 250px;
        }

        .node-terminal {
            font-size: 8px;
            min-width: 150px;
        }

        .header-ascii {
            font-size: 8px;
        }
    }

    /* Print Mode Adjustments */
    body.print-view .log-line {
        color: var(--foreground-print);
    }

    body.print-view .log-header,
    body.print-view .log-footer {
        color: var(--foreground-print);
    }

    /* Professional Timeline Print Layout */
    .timeline-grid-print {
        margin: 10px 0;
    }

    .timeline-entry-print {
        display: grid;
        grid-template-columns: 45px 1fr;
        gap: 10px;
        margin-bottom: 8px;
        padding-bottom: 6px;
        border-bottom: 1px solid #eee;
        break-inside: avoid;
    }

    .timeline-entry-print:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .entry-year {
        font-weight: bold;
        font-size: 9pt;
        color: var(--foreground-print);
        text-align: center;
        padding: 2px;
        border: 1px solid #ddd;
        background: #f9f9f9;
        align-self: start;
    }

    .entry-content {
        padding: 0;
    }

    .entry-title {
        font-size: 10pt;
        font-weight: bold;
        margin: 0 0 2px 0;
        color: var(--foreground-print);
        line-height: 1.2;
    }

    .entry-description {
        font-size: 8pt;
        margin: 0 0 3px 0;
        color: #666;
        line-height: 1.2;
    }

    .entry-type {
        display: inline-block;
        font-size: 6pt;
        font-weight: bold;
        background: #f5f5f5;
        padding: 1px 3px;
        border: 1px solid #ddd;
        color: #555;
        text-transform: uppercase;
        letter-spacing: 0.3px;
    }

    @media print {
        .timeline-entry-print {
            page-break-inside: avoid;
            grid-template-columns: 40px 1fr;
            gap: 8px;
            margin-bottom: 6px;
            padding-bottom: 4px;
        }

        .entry-year {
            background: white !important;
            border: 1px solid black !important;
            font-size: 8pt !important;
            padding: 1px !important;
        }

        .entry-type {
            background: white !important;
            border: 1px solid black !important;
            font-size: 5pt !important;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const schematic = document.querySelector('.system-schematic');
        const statusIndicator = document.querySelector('.status-indicator');
        const navPrev = document.querySelector('.nav-prev');
        const navNext = document.querySelector('.nav-next');
        const systemNodes = document.querySelectorAll('.system-node');

        if (!schematic || !statusIndicator || !navPrev || !navNext) return;

        let currentIndex = 0;

        // Update status indicator
        function updateStatus() {
            const progress = systemNodes.length > 1 ? (currentIndex / (systemNodes.length - 1)) * 100 : 0;
            const bars = Math.ceil((progress / 100) * 4);
            statusIndicator.textContent = '█'.repeat(bars) + '░'.repeat(4 - bars);
        }

        // Scroll to node
        function scrollToNode(index) {
            if (index < 0 || index >= systemNodes.length) return;
            
            const node = systemNodes[index];
            const nodeLeft = parseFloat(node.style.left);
            const containerWidth = schematic.offsetWidth;
            const trackWidth = schematic.scrollWidth;
            
            const scrollLeft = (nodeLeft / 100) * trackWidth - (containerWidth / 2);
            schematic.scrollTo({
                left: Math.max(0, Math.min(scrollLeft, trackWidth - containerWidth)),
                behavior: 'smooth'
            });
            
            currentIndex = index;
            updateStatus();
            
            // Pulse active node
            systemNodes.forEach(n => n.classList.remove('active-node'));
            node.classList.add('active-node');
        }

        // Navigation
        navPrev.addEventListener('click', () => {
            if (currentIndex > 0) {
                scrollToNode(currentIndex - 1);
            }
        });

        navNext.addEventListener('click', () => {
            if (currentIndex < systemNodes.length - 1) {
                scrollToNode(currentIndex + 1);
            }
        });

        // Node click navigation
        systemNodes.forEach((node, index) => {
            node.addEventListener('click', () => {
                scrollToNode(index);
            });
        });

        // System monitoring effect on scroll
        schematic.addEventListener('scroll', () => {
            const scrollLeft = schematic.scrollLeft;
            const maxScroll = schematic.scrollWidth - schematic.offsetWidth;
            const scrollProgress = scrollLeft / maxScroll;
            
            // Add subtle parallax to connectors
            const connectors = document.querySelectorAll('.connection-ascii');
            connectors.forEach((connector, index) => {
                const offset = (scrollProgress - (index / (connectors.length - 1))) * 5;
                connector.style.transform = `translateY(${offset}px)`;
            });
        });

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
                navPrev.click();
            } else if (e.key === 'ArrowRight') {
                navNext.click();
            }
        });

        // System startup animation
        function initializeSystem() {
            systemNodes.forEach((node, index) => {
                setTimeout(() => {
                    node.style.opacity = '1';
                    node.style.transform = 'translateX(-50%) translateY(0)';
                }, index * 200);
            });
        }

        // Initialize system
        updateStatus();
        setTimeout(initializeSystem, 500);

        // Add CSS for startup animation
        const style = document.createElement('style');
        style.textContent = `
            .system-node {
                opacity: 0;
                transform: translateX(-50%) translateY(20px);
                transition: all 0.6s ease;
            }
            .active-node .node-marker {
                animation: activeNodePulse 1s ease-in-out infinite !important;
            }
            @keyframes activeNodePulse {
                0%, 100% { box-shadow: 0 0 15px currentColor; }
                50% { box-shadow: 0 0 25px currentColor, 0 0 35px currentColor; }
            }
        `;
        document.head.appendChild(style);
    });
</script>