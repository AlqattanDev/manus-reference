---
/**
 * Action Buttons Component
 * Extracted from ProjectEntry.astro - displays project action buttons
 */
import type { BaseComponentProps } from '@/types/component.js';
import type { ProjectAction } from '@/types/project.js';

export interface ActionButtonsProps extends BaseComponentProps {
  demoUrl?: string;
  githubUrl?: string;
  actions?: ProjectAction[];
  variant?: 'default' | 'compact' | 'minimal';
  showCaseStudy?: boolean;
}

const { 
  demoUrl,
  githubUrl,
  actions: customActions,
  variant = 'default',
  showCaseStudy = true,
  className = '',
  ...props 
} = Astro.props as ActionButtonsProps;

// Generate default actions based on available URLs
const defaultActions: ProjectAction[] = [
  ...(demoUrl ? [{
    type: 'demo' as const,
    label: 'â†’ Live Demo',
    url: demoUrl,
    icon: 'â†’',
    primary: true,
  }] : []),
  ...(githubUrl ? [{
    type: 'github' as const,
    label: 'âŸ¨/âŸ© Source',
    url: githubUrl,
    icon: 'âŸ¨/âŸ©',
    primary: false,
  }] : []),
  ...(showCaseStudy ? [{
    type: 'case-study' as const,
    label: 'ðŸ“‹ Case Study',
    icon: 'ðŸ“‹',
    primary: false,
    disabled: true, // TODO: Implement case study functionality
  }] : []),
];

const actions = customActions || defaultActions;
---

<div class={`project-actions project-actions-${variant} ${className}`} {...props}>
  {actions.map((action) => (
    <button 
      class={`action-btn ${action.type}-btn ${action.primary ? 'primary' : ''} ${action.disabled ? 'disabled' : ''}`}
      data-url={action.url}
      data-type={action.type}
      disabled={action.disabled}
      title={action.disabled ? 'Coming soon' : undefined}
      aria-label={action.disabled ? `${action.label} - Coming soon` : action.label}
      aria-describedby={action.disabled ? undefined : `${action.type}-description`}
    >
      <span class="action-icon" aria-hidden="true">{action.icon}</span>
      <span class="action-label">{action.label}</span>
      <span class="sr-only loading-text" aria-live="polite"></span>
    </button>
  ))}
</div>

<style>
/* Import component base styles */
@import '../../styles/components.css';

/* Component-specific styles */
.project-actions {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
  flex-wrap: wrap;
}

/* Variant styles */
.project-actions-compact .action-btn {
  padding: 3px 6px;
  font-size: 8px;
  gap: 3px;
}

.project-actions-compact .action-icon {
  font-size: 9px;
}

.project-actions-compact .action-label {
  font-size: 8px;
}

.project-actions-minimal .action-btn {
  border: none;
  padding: 2px 4px;
  font-size: 8px;
  text-decoration: underline;
}

.project-actions-minimal .action-btn:hover {
  background: transparent;
  text-decoration: none;
  transform: none;
}

/* Print mode styles */
body.print-view .project-actions {
  display: none;
}

/* Loading state */
.action-btn.loading {
  opacity: 0.6;
  pointer-events: none;
}

.action-btn.loading .action-label::after {
  content: '...';
  animation: loading-dots 1.5s infinite;
}

@keyframes loading-dots {
  0%, 20% { content: ''; }
  40% { content: '.'; }
  60% { content: '..'; }
  80%, 100% { content: '...'; }
}

/* Success feedback */
.action-btn.success {
  border-color: var(--color-success);
  color: var(--color-success);
}

.action-btn.success::after {
  content: 'âœ“';
  position: absolute;
  right: 2px;
  top: 2px;
  font-size: 6px;
  opacity: 0.8;
}

/* Error feedback */
.action-btn.error {
  border-color: var(--color-error);
  color: var(--color-error);
}

.action-btn.error::after {
  content: 'âœ—';
  position: absolute;
  right: 2px;
  top: 2px;
  font-size: 6px;
  opacity: 0.8;
}
</style>

<script>
import { initActionButtons } from '@/utils/client/actionButtons.js';

// Initialize action buttons when component is ready
document.addEventListener('DOMContentLoaded', () => {
  // Initialize for the entire document (can be scoped to component root if needed)
  const cleanup = initActionButtons();

  // Store cleanup function for potential future use
  (window as any).actionButtonsCleanup = cleanup;
});
</script>