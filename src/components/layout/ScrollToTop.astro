---
/**
 * ScrollToTop Component
 * Floating button to scroll back to top of page
 */
export interface ScrollToTopProps {
  className?: string;
  showAfter?: number; // Pixels to scroll before showing
}

const { 
  className = '',
  showAfter = 300
} = Astro.props as ScrollToTopProps;
---

<button 
  class={`scroll-to-top digital-only ${className}`} 
  id="scrollToTop" 
  aria-label="Scroll to top" 
  tabindex="0"
  data-show-after={showAfter}
>
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" aria-hidden="true">
    <path d="m18 15-6-6-6 6"/>
  </svg>
</button>

<style>
@import '../../styles/design-system.css';

/* Scroll to Top Button */
.scroll-to-top {
  position: fixed;
  bottom: 100px;
  right: var(--space-xl);
  width: 44px;
  height: 44px;
  border-radius: var(--radius-full);
  background: var(--glass-bg);
  color: var(--text-color);
  border: 1px solid var(--glass-border);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  visibility: hidden;
  transform: translateY(var(--space-lg));
  transition: all var(--transition-base) var(--ease-in-out);
  z-index: var(--z-sticky);
  backdrop-filter: blur(10px);
  box-shadow: var(--shadow-lg);
}

.scroll-to-top.visible {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.scroll-to-top:hover {
  background: var(--glass-border);
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-xl);
}

/* Mobile adjustments */
@media (max-width: 768px) {
  .scroll-to-top {
    bottom: 106px; /* Adjust for status bar */
    right: var(--space-md);
    width: 38px;
    height: 38px;
  }
}

@media (max-width: 480px) {
  .scroll-to-top {
    bottom: 42px; /* Adjust for status bar */
    right: var(--space-sm);
    width: 35px;
    height: 35px;
  }
}
</style>

<script>
// Scroll to Top Functionality
const initScrollToTop = () => {
  const scrollToTopBtn = document.querySelector('.scroll-to-top') as HTMLElement | null;
  
  if (!scrollToTopBtn) return;
  
  const showAfter = parseInt(scrollToTopBtn.dataset.showAfter || '300', 10);
  
  // Throttle function for performance
  function throttle(func: Function, limit: number) {
    let inThrottle: boolean;
    return function(this: any, ...args: any[]) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }
  
  function toggleScrollToTop() {
    try {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      if (scrollToTopBtn) {
        if (scrollTop > showAfter) {
          scrollToTopBtn.classList.add('visible');
        } else {
          scrollToTopBtn.classList.remove('visible');
        }
      }
    } catch (error) {
      console.error('Failed to toggle scroll to top button:', error);
    }
  }
  
  const scrollToTop = () => {
    try {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
      // Fallback for browsers that don't support smooth scrolling
      console.warn('Smooth scrolling not supported, using fallback:', error);
      window.scrollTo(0, 0);
    }
  };
  
  // Event listeners
  scrollToTopBtn.addEventListener('click', scrollToTop);
  
  // Add keyboard support
  scrollToTopBtn.addEventListener('keydown', (e) => {
    const keyEvent = e as KeyboardEvent;
    if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
      keyEvent.preventDefault();
      scrollToTop();
    }
  });
  
  // Use throttled scroll listener for better performance
  const throttledToggleScrollToTop = throttle(toggleScrollToTop, 100);
  
  window.addEventListener('scroll', throttledToggleScrollToTop, { passive: true });
  
  // Initial check
  toggleScrollToTop();
};

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initScrollToTop);
} else {
  initScrollToTop();
}
</script>