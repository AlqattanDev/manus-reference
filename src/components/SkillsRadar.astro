---
interface SkillCategory {
  name: string;
  skills: {
    name: string;
    level: number; // 0-100
    years: number;
  }[];
}

interface Props {
  categories: SkillCategory[];
}

const { categories } = Astro.props as Props;

// Calculate radar points for each skill
const calculateRadarPoints = (skills: any[], radius: number) => {
  const angleStep = (Math.PI * 2) / skills.length;
  return skills.map((skill, index) => {
    const angle = angleStep * index - Math.PI / 2; // Start from top
    const r = (skill.level / 100) * radius;
    return {
      x: Math.cos(angle) * r,
      y: Math.sin(angle) * r,
      labelX: Math.cos(angle) * (radius + 20),
      labelY: Math.sin(angle) * (radius + 20),
      ...skill
    };
  });
};

// Default active category
const defaultCategory = categories[0];
const radarRadius = 120;
---

<div class="skills-radar-container">
  <!-- Print View: Skills Matrix -->
  <div class="radar-print">
    <div class="skills-matrix-print">
      <div class="skills-grid">
        {categories.map(category => (
          <div class="skill-category-print">
            <h4 class="category-title">{category.name}</h4>
            <div class="skills-list">
              {category.skills.map(skill => (
                <div class="skill-item-print">
                  <span class="skill-name">{skill.name}</span>
                  <div class="skill-bar">
                    <div class="skill-fill" style={`width: ${skill.level}%`}></div>
                  </div>
                  <span class="skill-level">{skill.level}%</span>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Digital View: Interactive Radar System -->
  <div class="radar-digital">
    <!-- System Header -->
    <div class="radar-header">
      <div class="header-text">
        ┌─ SKILL_ANALYSIS_SYSTEM ─────────────────┐<br/>
        │ MODE: RADAR_VISUALIZATION v2.4.1        │<br/>
        └──────────────────────────────────────────┘
      </div>
    </div>

    <!-- Category Selector -->
    <div class="category-selector">
      <div class="selector-label">[SELECT_CATEGORY]</div>
      <div class="category-tabs">
        {categories.map((category, index) => (
          <button 
            class={`category-tab ${index === 0 ? 'active' : ''}`}
            data-category={index}
          >
            [{category.name.toUpperCase()}]
          </button>
        ))}
      </div>
    </div>

    <!-- Radar Chart Container -->
    <div class="radar-chart-container">
      <svg class="radar-svg" viewBox="-200 -200 400 400" width="400" height="400">
        <!-- Grid Circles -->
        {[20, 40, 60, 80, 100].map(percent => (
          <circle
            cx="0"
            cy="0"
            r={(percent / 100) * radarRadius}
            fill="none"
            stroke="var(--border-digital)"
            stroke-width="0.5"
            opacity="0.3"
            stroke-dasharray="2,4"
          />
        ))}

        <!-- Grid Lines (Axes) -->
        <g class="radar-axes" id="radar-axes">
          <!-- Will be populated by JavaScript -->
        </g>

        <!-- Data Polygon -->
        <g class="radar-data" id="radar-data">
          <!-- Will be populated by JavaScript -->
        </g>

        <!-- Skill Labels -->
        <g class="radar-labels" id="radar-labels">
          <!-- Will be populated by JavaScript -->
        </g>

        <!-- Center Point -->
        <circle cx="0" cy="0" r="3" fill="var(--foreground-digital)" />
      </svg>

      <!-- Hover Details Panel -->
      <div class="skill-details-panel">
        <div class="panel-header">
          ┌─ SKILL_DETAILS ─┐
        </div>
        <div class="panel-content">
          <div class="detail-line">│ NAME: <span id="skill-name">--</span></div>
          <div class="detail-line">│ LEVEL: <span id="skill-level">--</span>%</div>
          <div class="detail-line">│ YEARS: <span id="skill-years">--</span></div>
          <div class="detail-line">│ STATUS: <span id="skill-status">--</span></div>
        </div>
        <div class="panel-footer">
          └─────────────────┘
        </div>
      </div>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid">
      <div class="stat-box">
        <div class="stat-label">[TOTAL_SKILLS]</div>
        <div class="stat-value" id="total-skills">--</div>
      </div>
      <div class="stat-box">
        <div class="stat-label">[AVG_LEVEL]</div>
        <div class="stat-value" id="avg-level">--%</div>
      </div>
      <div class="stat-box">
        <div class="stat-label">[EXPERTISE]</div>
        <div class="stat-value" id="expertise">--</div>
      </div>
    </div>

    <!-- ASCII Animation Footer -->
    <div class="radar-footer">
      <div class="scanning-line">
        [<span class="scan-animation">████████████████████</span>] SCANNING...
      </div>
    </div>
  </div>
</div>

<style>
  .skills-radar-container {
    margin: 40px 0;
    position: relative;
  }

  /* Print View */
  .radar-print {
    display: none;
  }

  body.print-view .radar-print {
    display: block;
  }

  body.print-view .radar-digital {
    display: none;
  }

  /* Print View Styles */
  .skills-matrix-print {
    padding: 5px 0;
    margin: 0;
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
    margin: 0;
  }

  .skill-category-print {
    break-inside: avoid;
  }

  .category-title {
    font-size: 10pt;
    font-weight: bold;
    margin-bottom: 4px;
    text-transform: uppercase;
    border-bottom: 1px solid #ddd;
    padding-bottom: 2px;
  }

  .skills-list {
    margin-top: 2px;
  }

  .skill-item-print {
    display: flex;
    align-items: center;
    gap: 6px;
    margin-bottom: 2px;
    font-size: 8pt;
  }

  .skill-name {
    flex: 0 0 80px;
    font-size: 8pt;
  }

  .skill-bar {
    flex: 1;
    height: 8px;
    background: #f0f0f0;
    border: 1px solid #ccc;
    position: relative;
  }

  .skill-fill {
    height: 100%;
    background: #333;
    transition: width 0.3s ease;
  }

  .skill-level {
    flex: 0 0 35px;
    text-align: right;
    font-weight: bold;
    font-size: 9pt;
  }

  @media print {
    .skills-matrix-print {
      padding: 0 !important;
      margin: 0 !important;
    }

    .skills-grid {
      grid-template-columns: repeat(3, 1fr) !important;
      gap: 8px !important;
      margin: 0 !important;
    }

    .skill-category-print {
      page-break-inside: avoid;
    }

    .skill-bar {
      background: white !important;
      border: 1px solid black !important;
    }

    .skill-fill {
      background: black !important;
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
  }

  /* Digital View */
  .radar-digital {
    display: block;
    padding: 20px;
    background: rgba(10, 14, 39, 0.5);
    border: 1px solid var(--border-digital);
    border-radius: 4px;
  }

  .radar-header {
    text-align: center;
    margin-bottom: 20px;
  }

  .header-text {
    font-family: var(--font-body);
    font-size: 10px;
    color: var(--foreground-digital);
    white-space: pre;
    line-height: 1.2;
    opacity: 0.8;
  }

  /* Category Selector */
  .category-selector {
    margin-bottom: 30px;
    text-align: center;
  }

  .selector-label {
    font-family: var(--font-body);
    font-size: 10px;
    color: var(--muted-digital);
    margin-bottom: 10px;
  }

  .category-tabs {
    display: flex;
    justify-content: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .category-tab {
    background: transparent;
    border: 1px solid var(--border-digital);
    color: var(--muted-digital);
    padding: 6px 12px;
    font-family: var(--font-body);
    font-size: 10px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
  }

  .category-tab:hover {
    color: var(--foreground-digital);
    border-color: var(--foreground-digital);
    box-shadow: 0 0 10px rgba(100, 255, 218, 0.3);
  }

  .category-tab.active {
    background: var(--accent-digital);
    color: var(--background-digital);
    border-color: var(--accent-digital);
    box-shadow: 0 0 15px var(--accent-digital);
  }

  /* Radar Chart */
  .radar-chart-container {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 30px 0;
  }

  .radar-svg {
    max-width: 100%;
    height: auto;
  }

  /* Skill Details Panel */
  .skill-details-panel {
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(0, 0, 0, 0.9);
    border: 1px solid var(--border-digital);
    padding: 10px;
    font-family: var(--font-body);
    font-size: 9px;
    color: var(--foreground-digital);
    min-width: 180px;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .skill-details-panel.active {
    opacity: 1;
  }

  .panel-header, .panel-footer {
    color: var(--muted-digital);
    line-height: 1;
  }

  .panel-content {
    margin: 5px 0;
  }

  .detail-line {
    line-height: 1.4;
    color: var(--foreground-digital);
  }

  .detail-line span {
    color: var(--accent-digital);
    font-weight: bold;
  }

  /* Stats Grid */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    margin: 30px 0;
  }

  .stat-box {
    background: rgba(0, 0, 0, 0.5);
    border: 1px solid var(--border-digital);
    padding: 10px;
    text-align: center;
  }

  .stat-label {
    font-family: var(--font-body);
    font-size: 9px;
    color: var(--muted-digital);
    margin-bottom: 5px;
  }

  .stat-value {
    font-family: var(--font-body);
    font-size: 18px;
    color: var(--accent-digital);
    font-weight: bold;
  }

  /* Footer Animation */
  .radar-footer {
    text-align: center;
    margin-top: 20px;
  }

  .scanning-line {
    font-family: var(--font-body);
    font-size: 10px;
    color: var(--muted-digital);
  }

  .scan-animation {
    display: inline-block;
    animation: scan 2s linear infinite;
    color: var(--foreground-digital);
    letter-spacing: -2px;
  }

  @keyframes scan {
    0% { transform: translateX(-100%); opacity: 0; }
    50% { opacity: 1; }
    100% { transform: translateX(100%); opacity: 0; }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .radar-svg {
      width: 300px;
      height: 300px;
    }

    .category-tabs {
      justify-content: flex-start;
      overflow-x: auto;
    }

    .skill-details-panel {
      position: static;
      margin-top: 20px;
      opacity: 1;
      pointer-events: auto;
    }
  }
</style>

<script define:vars={{ categories, radarRadius }}>
  document.addEventListener('DOMContentLoaded', () => {
    const axesGroup = document.getElementById('radar-axes');
    const dataGroup = document.getElementById('radar-data');
    const labelsGroup = document.getElementById('radar-labels');
    const detailsPanel = document.querySelector('.skill-details-panel');
    const categoryTabs = document.querySelectorAll('.category-tab');
    
    let currentCategory = 0;
    let animationFrame = null;
    let progress = 0;

    function calculatePoints(skills, radius) {
      const angleStep = (Math.PI * 2) / skills.length;
      return skills.map((skill, index) => {
        const angle = angleStep * index - Math.PI / 2;
        const r = (skill.level / 100) * radius;
        return {
          x: Math.cos(angle) * r,
          y: Math.sin(angle) * r,
          labelX: Math.cos(angle) * (radius + 25),
          labelY: Math.sin(angle) * (radius + 25),
          angle: angle,
          ...skill
        };
      });
    }

    function drawRadar(categoryIndex, animated = true) {
      const category = categories[categoryIndex];
      const points = calculatePoints(category.skills, radarRadius);
      
      // Clear previous content
      axesGroup.innerHTML = '';
      dataGroup.innerHTML = '';
      labelsGroup.innerHTML = '';

      // Draw axes
      points.forEach(point => {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', '0');
        line.setAttribute('y1', '0');
        line.setAttribute('x2', point.labelX * 0.85);
        line.setAttribute('y2', point.labelY * 0.85);
        line.setAttribute('stroke', 'var(--border-digital)');
        line.setAttribute('stroke-width', '0.5');
        line.setAttribute('opacity', '0.5');
        axesGroup.appendChild(line);
      });

      // Create data polygon
      const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
      const polygonPoints = points.map(p => `${p.x},${p.y}`).join(' ');
      polygon.setAttribute('points', polygonPoints);
      polygon.setAttribute('fill', 'rgba(100, 255, 218, 0.1)');
      polygon.setAttribute('stroke', 'var(--accent-digital)');
      polygon.setAttribute('stroke-width', '2');
      
      if (animated) {
        polygon.style.transform = 'scale(0)';
        polygon.style.transformOrigin = 'center';
        polygon.style.transition = 'transform 1s cubic-bezier(0.4, 0, 0.2, 1)';
        setTimeout(() => {
          polygon.style.transform = 'scale(1)';
        }, 100);
      }
      
      dataGroup.appendChild(polygon);

      // Add data points
      points.forEach((point, index) => {
        // Create point circle
        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('cx', point.x);
        circle.setAttribute('cy', point.y);
        circle.setAttribute('r', '4');
        circle.setAttribute('fill', 'var(--foreground-digital)');
        circle.setAttribute('stroke', 'var(--accent-digital)');
        circle.setAttribute('stroke-width', '2');
        circle.style.cursor = 'pointer';
        
        if (animated) {
          circle.style.opacity = '0';
          circle.style.transition = `opacity 0.3s ease ${index * 0.1}s`;
          setTimeout(() => {
            circle.style.opacity = '1';
          }, 100);
        }

        // Add hover interaction
        circle.addEventListener('mouseenter', () => {
          circle.setAttribute('r', '6');
          updateDetailsPanel(point);
          detailsPanel.classList.add('active');
        });

        circle.addEventListener('mouseleave', () => {
          circle.setAttribute('r', '4');
          detailsPanel.classList.remove('active');
        });

        dataGroup.appendChild(circle);

        // Add skill labels
        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        text.setAttribute('x', point.labelX);
        text.setAttribute('y', point.labelY);
        text.setAttribute('text-anchor', 'middle');
        text.setAttribute('dominant-baseline', 'middle');
        text.setAttribute('fill', 'var(--muted-digital)');
        text.setAttribute('font-size', '10');
        text.setAttribute('font-family', 'var(--font-body)');
        text.textContent = point.name;
        
        if (animated) {
          text.style.opacity = '0';
          text.style.transition = `opacity 0.3s ease ${index * 0.1 + 0.5}s`;
          setTimeout(() => {
            text.style.opacity = '1';
          }, 100);
        }
        
        labelsGroup.appendChild(text);
      });

      // Update stats
      updateStats(category);
    }

    function updateDetailsPanel(skill) {
      document.getElementById('skill-name').textContent = skill.name;
      document.getElementById('skill-level').textContent = skill.level;
      document.getElementById('skill-years').textContent = skill.years;
      document.getElementById('skill-status').textContent = 
        skill.level >= 80 ? 'EXPERT' : 
        skill.level >= 60 ? 'PROFICIENT' : 
        skill.level >= 40 ? 'INTERMEDIATE' : 'LEARNING';
    }

    function updateStats(category) {
      const totalSkills = category.skills.length;
      const avgLevel = Math.round(
        category.skills.reduce((sum, skill) => sum + skill.level, 0) / totalSkills
      );
      const expertise = avgLevel >= 80 ? 'EXPERT' : 
                       avgLevel >= 60 ? 'ADVANCED' : 
                       avgLevel >= 40 ? 'INTERMEDIATE' : 'BEGINNER';

      document.getElementById('total-skills').textContent = totalSkills;
      document.getElementById('avg-level').textContent = avgLevel + '%';
      document.getElementById('expertise').textContent = expertise;
    }

    // Category switching
    categoryTabs.forEach((tab, index) => {
      tab.addEventListener('click', () => {
        categoryTabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        currentCategory = index;
        drawRadar(index, true);
      });
    });

    // Initialize with first category
    drawRadar(0, true);

    // Add subtle rotation animation to the entire radar
    let rotation = 0;
    function rotateRadar() {
      rotation += 0.1;
      const radarSvg = document.querySelector('.radar-svg');
      if (radarSvg) {
        const dataGroup = radarSvg.querySelector('.radar-data');
        if (dataGroup) {
          dataGroup.style.transform = `rotate(${rotation}deg)`;
          dataGroup.style.transformOrigin = 'center';
        }
      }
      animationFrame = requestAnimationFrame(rotateRadar);
    }

    // Start subtle rotation (optional - comment out if too distracting)
    // rotateRadar();

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (animationFrame) {
        cancelAnimationFrame(animationFrame);
      }
    });
  });
</script>