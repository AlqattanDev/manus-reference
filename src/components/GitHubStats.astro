---
/**
 * GitHub Stats Component
 * Extracted from ProjectEntry.astro - displays real-time GitHub repository statistics
 */
import type { BaseComponentProps } from '@/types';
import type { GitHubStats as GitHubStatsType } from '@/types';

export interface GitHubStatsProps extends BaseComponentProps {
  repoUrl?: string;
  fallbackStats?: Partial<GitHubStatsType>;
  enableRealTime?: boolean;
  showLanguage?: boolean;
}

const { 
  repoUrl,
  fallbackStats = {},
  enableRealTime = true,
  showLanguage = true,
  className = '',
  ...props 
} = Astro.props as GitHubStatsProps;

// Extract owner/repo from URL
const getRepoInfo = (url?: string) => {
  if (!url) return null;
  const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
  return match ? { owner: match[1], repo: match[2] } : null;
};

const repoInfo = getRepoInfo(repoUrl);
---

<div 
  class={`github-stats ${className}`} 
  data-repo={repoUrl}
  data-enable-realtime={enableRealTime}
  data-show-language={showLanguage}
  role="region"
  aria-label="GitHub repository statistics"
  aria-live="polite"
  {...props}
>
  <div class="stat-item loading" role="status" aria-label="Repository stars">
    <span aria-hidden="true">★</span>
    <span class="stat-value">{fallbackStats.stars || 'Loading...'}</span>
    <span class="sr-only">stars</span>
  </div>
  <div class="stat-item loading" role="status" aria-label="Repository forks">
    <span aria-hidden="true">⑃</span>
    <span class="stat-value">{fallbackStats.forks || 'Loading...'}</span>
    <span class="sr-only">forks</span>
  </div>
  {showLanguage && (
    <div class="stat-item loading" role="status" aria-label="Primary programming language">
      <span aria-hidden="true">⚡</span>
      <span class="stat-value">{fallbackStats.language || 'Loading...'}</span>
    </div>
  )}
</div>

<style>
/* No import needed - styles self-contained */

/* Component-specific styles */
.github-stats {
  display: flex;
  gap: 12px;
  margin-bottom: 10px;
  font-size: 10px;
  color: var(--muted-digital);
}

/* Loading animation */
.github-stats .loading {
  opacity: 0.5;
  animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 0.3; }
  50% { opacity: 0.7; }
}

.github-stats.loaded .loading {
  animation: none;
  opacity: 1;
}

/* Print mode styles */
body.print-view .github-stats {
  color: var(--muted-print);
}

body.print-view .github-stats .loading {
  animation: none;
  opacity: 1;
}

/* Responsive design */
@media (max-width: 768px) {
  .github-stats {
    font-size: 9px;
    gap: 10px;
  }
}
</style>

<script>
import { initGitHubStats } from '@/utils/client';

// Initialize GitHub stats when component is ready
document.addEventListener('DOMContentLoaded', () => {
  // Initialize for the entire document (can be scoped to component root if needed)
  const cleanup = initGitHubStats();

  // Store cleanup function for potential future use
  (window as any).githubStatsCleanup = cleanup;
});
</script>