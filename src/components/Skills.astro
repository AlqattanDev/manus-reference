---
/**
 * Modern Skills Component
 * Minimalist design with elegant progress indicators
 */
import type { SkillsProps, SkillLevel, SkillBarStyle } from '@/types';
import {
  generateSkillBarConfig,
  generateEnhancedSkillBar,
  isValidSkillLevel,
  skillLevelToPercentage,
} from '@/utils/helpers';

const {
  skills,
  variant = 'grid',
  showProgressBars = true,
  interactive = true,
  barStyle = 'terminal',
  animations = true,
  className = '',
  ...props
} = Astro.props as SkillsProps;

// Get percentage for level
const getPercentage = (level: string): number => {
  if (!isValidSkillLevel(level)) return 0;
  return skillLevelToPercentage(level as SkillLevel);
};
---

<div class={`skills-container modern-design ${className}`} {...props}>
  <div class="skills-grid">
    {
      skills && skills.length > 0 ? (
        skills.map((category) => (
          <div class="skill-category-card">
            <div class="category-header">
              <h3 class="category-title">{category.header}</h3>
              <span class="category-experience">{category.years}</span>
            </div>

            <div class="skills-collection">
              {category.items.map((skill) => (
                <div class={`skill-card ${interactive ? 'interactive' : ''}`}>
                  <div class="skill-content">
                    <div class="skill-main">
                      <h4 class="skill-name">{skill.name}</h4>
                      <div class="skill-level-indicator">
                        <span class="level-text">{skill.level}</span>
                        <span class="level-percentage">{getPercentage(skill.level)}%</span>
                      </div>
                    </div>

                    {showProgressBars && (
                      <div class="skill-visualization">
                        <div class="progress-ring">
                          <svg class="progress-svg" viewBox="0 0 42 42">
                            <circle class="progress-bg" 
                              cx="21" cy="21" r="15.9155" 
                              fill="none" 
                              stroke-width="2"
                            />
                            <circle class="progress-bar" 
                              cx="21" cy="21" r="15.9155" 
                              fill="none" 
                              stroke-width="2"
                              stroke-dasharray={`${getPercentage(skill.level)} 100`}
                              stroke-dashoffset="25"
                            />
                          </svg>
                          <div class="progress-text">
                            <span class="progress-value">{getPercentage(skill.level)}</span>
                          </div>
                        </div>
                        
                        <div class="skill-details">
                          <div class="detail-item">
                            <span class="detail-label">Experience</span>
                            <span class="detail-value">{skill.years}</span>
                          </div>
                          <div class="detail-item">
                            <span class="detail-label">Projects</span>
                            <span class="detail-value">{skill.projects}</span>
                          </div>
                          {skill.highlight && (
                            <div class="detail-highlight">
                              {skill.highlight}
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      ) : (
        <div class="skills-empty">
          <span class="empty-message">No skills data available</span>
        </div>
      )
    }
  </div>
</div>

<style>
  /* Modern Skills Container */
  .skills-container.modern-design {
    padding: 0;
    font-family: var(--font-body);
    --skill-primary: var(--foreground-digital);
    --skill-secondary: var(--muted-digital);
    --skill-accent: var(--foreground-digital);
    --skill-gradient-start: rgba(0, 255, 65, 0.08);
    --skill-gradient-end: rgba(0, 255, 65, 0.01);
    --skill-border: var(--border-digital);
    --skill-shadow: var(--shadow-md);
  }

  .skills-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-2xl);
  }

  /* Category Card */
  .skill-category-card {
    background: linear-gradient(135deg, var(--skill-gradient-start), var(--skill-gradient-end));
    border: 1px solid var(--skill-border);
    border-radius: var(--radius-2xl);
    padding: var(--space-xl);
    backdrop-filter: blur(10px);
    transition: all var(--transition-base) var(--ease-in-out);
  }

  .skill-category-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: var(--skill-accent);
  }

  .category-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-xl);
    padding-bottom: var(--space-md);
    border-bottom: 1px solid var(--skill-border);
  }

  .category-title {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: var(--skill-primary);
    margin: 0;
    letter-spacing: var(--letter-spacing-tight);
  }

  .category-experience {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--skill-secondary);
    background: rgba(255, 255, 255, 0.05);
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-full);
  }

  /* Skills Collection */
  .skills-collection {
    display: grid;
    gap: var(--space-lg);
  }

  /* Individual Skill Card */
  .skill-card {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: var(--radius-xl);
    padding: var(--space-lg);
    transition: all var(--transition-base) var(--ease-in-out);
  }

  .skill-card.interactive:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: var(--skill-accent);
    transform: translateX(4px);
  }

  .skill-content {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .skill-main {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .skill-name {
    font-size: 14px;
    font-weight: 600;
    color: var(--skill-primary);
    margin: 0;
    letter-spacing: -0.01em;
  }

  .skill-level-indicator {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .level-text {
    font-size: 11px;
    font-weight: 500;
    color: var(--skill-accent);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    padding: 2px 8px;
    background: rgba(0, 255, 65, 0.1);
    border-radius: var(--radius-base);
  }

  .level-percentage {
    font-size: 12px;
    font-weight: 600;
    color: var(--skill-secondary);
  }

  /* Progress Visualization */
  .skill-visualization {
    display: grid;
    grid-template-columns: 60px 1fr;
    gap: 16px;
    align-items: center;
  }

  /* Circular Progress */
  .progress-ring {
    position: relative;
    width: 60px;
    height: 60px;
  }

  .progress-svg {
    width: 100%;
    height: 100%;
    transform: rotate(-90deg);
  }

  .progress-bg {
    fill: none;
    stroke: rgba(255, 255, 255, 0.1);
    stroke-width: 2;
  }

  .progress-bar {
    fill: none;
    stroke: var(--skill-accent);
    stroke-linecap: round;
    stroke-width: 2;
    transition: stroke-dasharray 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }

  .progress-value {
    font-size: 14px;
    font-weight: 600;
    color: var(--skill-primary);
  }

  /* Skill Details */
  .skill-details {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .detail-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 11px;
  }

  .detail-label {
    color: var(--skill-secondary);
    opacity: 0.7;
  }

  .detail-value {
    color: var(--skill-primary);
    font-weight: 500;
  }

  .detail-highlight {
    font-size: 10px;
    color: var(--skill-accent);
    opacity: 0.8;
    margin-top: 4px;
    padding-top: 6px;
    border-top: 1px solid rgba(255, 255, 255, 0.05);
  }

  /* Empty State */
  .skills-empty {
    text-align: center;
    padding: 60px 20px;
    color: var(--skill-secondary);
  }

  .empty-message {
    font-size: 14px;
    opacity: 0.6;
  }

  /* Responsive Design */
  @media (min-width: 768px) {
    .skills-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 24px;
    }
  }

  @media (min-width: 1024px) {
    .skill-category-card {
      padding: 32px;
    }

    .category-title {
      font-size: 20px;
    }

    .skill-name {
      font-size: 15px;
    }
  }

  @media (max-width: 640px) {
    .skill-category-card {
      padding: 20px;
      border-radius: var(--radius-xl);
    }

    .category-title {
      font-size: 16px;
    }

    .skills-collection {
      gap: 12px;
    }

    .skill-card {
      padding: 12px;
    }

    .skill-visualization {
      grid-template-columns: 50px 1fr;
      gap: 12px;
    }

    .progress-ring {
      width: 50px;
      height: 50px;
    }

    .progress-value {
      font-size: 12px;
    }
  }

  /* Animation Classes */
  .skill-card {
    animation: fadeInUp 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  .skill-card:nth-child(1) { animation-delay: 0.1s; }
  .skill-card:nth-child(2) { animation-delay: 0.2s; }
  .skill-card:nth-child(3) { animation-delay: 0.3s; }
  .skill-card:nth-child(4) { animation-delay: 0.4s; }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Dark Mode Optimizations */
  @media (prefers-color-scheme: dark) {
    .skill-category-card {
      background: linear-gradient(135deg, 
        rgba(255, 255, 255, 0.03), 
        rgba(255, 255, 255, 0.01));
    }
  }

  /* Print Styles */
  @media print {
    .skill-category-card {
      border: 1px solid var(--foreground-print);
      background: none;
      page-break-inside: avoid;
    }

    .progress-bar {
      stroke: var(--foreground-print);
    }

    .skill-card {
      animation: none;
      opacity: 1;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .skill-card,
    .progress-bar {
      animation: none;
    }

    .skill-card {
      opacity: 1;
    }

    * {
      transition: none !important;
    }
  }
</style>